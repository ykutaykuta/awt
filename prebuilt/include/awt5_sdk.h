// ========================================+===========
//
// AWT5 SDK header file
// (c) Alex Radzishevsky, 2007-2021 
// http://audiowatermarking.com (.info)
//
// AWT5 0.01.06g
// SDK update: 2022-02-18
// 
// ===================================================


// ===================================================
//
// DO NOT EDIT THIS FILE!
//
// ===================================================


#if __cplusplus
extern "C" {
#endif

#ifndef AWT5_SDK_H
#define AWT5_SDK_H



    // Maximal printable size of watermark payload in a textual hex form (e.g. "0xABCDEF")
    // Supported maximum: "0xFFFFFFFFFFFFFF" (12 bytes) plus ending \0 is 27 bytes
    #define AWT5_MAX_PRINTABLE_PAYLOAD_BYTES    27


    // ============================================================================
    // ============================================================================
    // ============================================================================
    //
    // Informational calls
    //
    // ============================================================================
    // ============================================================================
    // ============================================================================


    // --------------------------------------------------------------------------
    // Returns AWT5 Serial Number information (text)
    // The memory is allocated inside this function, freeing it is on user
    // --------------------------------------------------------------------------
    void awt5_sn(char** serial_number);



    // --------------------------------------------------------------------------
    // Prints AWT5 error text into stdout
    // --------------------------------------------------------------------------
    void awt5_print_err_text(int err);






    // ============================================================================
    // ============================================================================
    // ============================================================================
    //
    // Audio stream encoding (watermarking)
    //
    // ============================================================================
    // ============================================================================
    // ============================================================================


    // AWT5 Encoder object declaration
    typedef struct _AWT5_ENC_OBJ AWT5_ENC_OBJ, * PAWT5_ENC_OBJ;


    // --------------------------------------------------------------------------
    // Allocates AWT5 stream encoder object and initializes it.
    // Returns (via arguments):
    //      - pointer on enc_obj_ptr (or NULL on error).
    //      - algorithmic latency - i.e. how many samples must be fed to the encoder input 
    //        in order to see the first sample on the output
    //        (depends on sampling frequency)
    //      - size of one single-channel audio buffer expected by the encoding function
    //        (depends on sampling frequency)
    // Returns:
    //      0  -- on success, 
    //      >0 -- on error (see AWT5 doc for error codes)
    // Notes: 
    // * wm_payload is expected to end with \0 (nil)
    // * the object is for single or MULTIPLE channels of audio. The input audio samples  
    //   of a multi-channel audio are expected to be de-interlieved. 
    //   For multiple channels of audio, the encoder assumes the following input buffer 
    //   data structure:
    //   [chan1-buf][chan2-buf] ... [chanN-buf] 
    // --------------------------------------------------------------------------

    unsigned awt5_encode_stream_init(
        PAWT5_ENC_OBJ* enc_obj_ptr,     // OUT: pointer on AWT5 Encoder object
        unsigned* algorithmic_delay,    // OUT: algorithmic latency, samples
        unsigned* buffer_size,          // OUT: input/output buffer size, samples (each sample is PCM float -1.0 .. +1.0)
        unsigned fs,                    // IN: sampling frequency, Hz (e.g. 8000, 16000, 44100, etc.)
        unsigned chans,                 // IN: number of audio channels (1, 2, ...)
        char* hex_payload,              // IN: watermark payload in a textual hex form (e.g. "0xABCDEF"), must end with 0x0 ("\0");
        unsigned bot_freq_hz,           // IN: bottom watermark carrier frequency, Hz (e.g. 2000)
        unsigned top_freq_hz,           // IN: top watermark carrier frequency, Hz (e.g. 7000)
        unsigned framesync_freq,        // IN: frame syncronization marker frequency, Hz (e.g. 3000)
        unsigned payload_frames,        // IN: number of frames used to carry the watermark (e.g. 1, 2)
        unsigned CRC_prcnt,             // IN: checksum size relative to the watermark length, in % (e.g. 20)
        float enc_aggr,                 // IN: encoding aggressiveness, higher = more robust & more audible, 
                                        //     lower = less robust & more transparent (e.g. 0.75)
        unsigned emboss_gain,           // IN: emboss gain, dB (e.g. -96)
        unsigned emphasis_gain,         // IN: emphasis gain, dB (e.g. +6)
        char* license                   // IN: license obtained from AWT5 Licensing Server 
                                        //     * Can be NULL for untied AWT5 versions
                                        //     * Used only with SaaS / Client-Server version of AWT5, the license is an 
                                        //       array of characters
    );




    // --------------------------------------------------------------------------
    // Processes (watermarks) single audio buffer. The size of the audio buffer is assumed
    // as returned by the initialization function via 'buffer_size' (in samples) 
    // multiplied by the number of audio channels (i.e. chans*buffer_size samples)
    // The PCM data is assumed to be in floats (-1.0 .. +1.0).
    // The input audio samples of a multi-channel audio are expected to be de-interlieved. 
    // For multiple channels of audio, the encoder assumes the following input buffer 
    // data structure:
    //   [chan1-buf][chan2-buf] ... [chanN-buf] 
    // AWT5 stream encoder object must be initialized prior to this call.
    // Parameter descriptions are provided below;
    // Returns:
    //      0  -- on success, 
    //      >0 -- on error (see AWT5 doc for error codes)
    // --------------------------------------------------------------------------

    int awt5_encode_stream_buffer(
        PAWT5_ENC_OBJ enc_obj,          // IN: pointer on initialized AWT5 Encoder object
        float* input_buffer,            // IN: input audio (each sample is PCM float -1.0 .. +1.0)
        float* output_buffer,           // OUT: output audio (each sample is PCM float -1.0 .. +1.0)
        unsigned* embedding_occurred    // OUT: flag, indicates whether watermark embedding occurred on the frame or not 
    );



    // --------------------------------------------------------------------------
    // Changes/sets watermark payload in already initialized encoder object. 
    // Allows to change watermark payload on the fly during live stream watermarking
    // The watermark payload in a textual hex form (e.g. "0xABCDEF"), must end with 0x0 ("\0");
    // Parameter descriptions are provided below;
    // Returns:
    //      0  -- on success, 
    //      >0 -- on error (see AWT5 doc for error codes)
    // --------------------------------------------------------------------------

    unsigned awt5_encode_stream_set_payload(
        PAWT5_ENC_OBJ enc_obj,          // IN: pointer on initialized AWT5 Encoder object
        char* hex_payload,              // IN: watermark payload in a textual hex form (e.g. "0xABCDEF"), must end with 0x0 ("\0");
        char* license                   // IN: reserved, pass NULL here
    );


    // --------------------------------------------------------------------------
    // Enables/disables processing (watermarking) bypass. 
    // If bypass is disabled (bypass=0), awt5_encode_stream_buffer() call outputs watermarked 
    // output (normal working state). If bypass is enabled (bypass=1), awt5_encode_stream_buffer() 
    // call outputs not watermarked audio data.
    // Encoder object must be initialized.
    // Parameter descriptions are provided below;
    // Returns:
    //      0  -- on success, 
    //      >0 -- on error (see AWT5 doc for error codes)
    // --------------------------------------------------------------------------

    unsigned awt5_encode_stream_set_bypass(
        PAWT5_ENC_OBJ enc_obj,          // IN: pointer on initialized AWT5 Encoder object
        unsigned bypass                 // IN: 1 -- for bypass (no embedding), 0 -- for processing (embedding)
    );


    // --------------------------------------------------------------------------
    // Kills AWT5 stream encoder object and frees all allocated memory
    // Returns: nothing
    // --------------------------------------------------------------------------

    void awt5_encode_stream_kill(
        PAWT5_ENC_OBJ *enc_obj
    );





    // ============================================================================
    // ============================================================================
    // ============================================================================
    //
    // Audio stream decoding (watermark extraction)
    //
    // ============================================================================
    // ============================================================================
    // ============================================================================

    // AWT5 Stream Decoder object declaration
    typedef struct _AWT5_DEC_OBJ AWT5_DEC_OBJ, * PAWT5_DEC_OBJ;


    // --------------------------------------------------------------------------
    // Initializes AWT5 Stream Decoder object.
    // Allocates memory for AWT5 Stream Decoder object which must be kept in 
    // memory as long as the audio decoding function is used.
    // Intended to process a SINGLE channel audio. Multiple channels require mupltiple 
    // decoder instances.
    // Parameter descriptions are provided below;
    // Returns:
    //      0  -- on success, 
    //      >0 -- on error (see AWT5 doc for error codes)
    // --------------------------------------------------------------------------

    unsigned awt5_decode_stream_init(
        PAWT5_DEC_OBJ* dec_obj_ptr,         // OUT: pointer on the decoder object (memory is allocated inside this function)
        unsigned* buffer_size,              // OUT: input/output buffer size, samples (each sample is PCM float -1.0 .. +1.0)
        unsigned wm_payload_length_bytes,   // IN: expected watermark payload length, bytes
        unsigned fs,                        // IN: sampling frequency, Hz (e.g. 8000, 16000, 44100, etc.)
        unsigned bot_freq_hz,               // IN: bottom watermark carrier frequency, Hz (e.g. 2000)
        unsigned top_freq_hz,               // IN: top watermark carrier frequency, Hz (e.g. 7000)
        unsigned framesync_freq,            // IN: frame syncronization marker frequency, Hz (e.g. 3000)
        unsigned payload_frames,            // IN: number of frames used to carry the watermark (e.g. 1, 2)
        unsigned CRC_prcnt,                 // IN: checksum size relative to the watermark length, in % (e.g. 20)
        unsigned lookback_sec,              // IN: duration of a history buffer used to collect stats required to extract watermark, sec (e.g. 5)
        char* license                       // IN: license obtained from AWT5 Licensing Server 
                                            //     * Can be NULL for untied AWT5 versions
                                            //     * Used only with SaaS / Client-Server version of AWT5, the license is an 
                                            //       array of characters    
    );


    // --------------------------------------------------------------------------
    // Performs processing of single audio buffer.
    // Performs watermark detection and extraction. 
    // The size of the audio buffer is assumed as returned by the initialization 
    // function via 'buffer_size' (in samples). 
    // The PCM data is assumed to be in floats (-1.0 .. +1.0).
    // The input audio samples of a multi-channel audio must be processed using separate 
    // decoder objects -- a dedicated decoder for each channel. 
    // AWT5 decoder object must be initialized prior to this call.
    // Parameter descriptions are provided below;
    // Returns:
    //      0  -- on success, 
    //      >0 -- on error (see AWT5 doc for error codes)
    // --------------------------------------------------------------------------

    int awt5_decode_stream_buffer(
        PAWT5_DEC_OBJ dec_obj,              // IN: pointer on initialized AWT5 Decoder object
        float* input_buffer,                // IN: input PCM audio (each sample is PCM float -1.0 .. +1.0)
        char* watermark,                    // OUT: detected watermark (hex text e.g. "0xABCDFEF12"), the memory must be preallocated externally;
                                            //      NULL if nothing is detected
        float* reliability                  // OUT: reliability of the detected watermark (0.0 - 1.0); mostly informational field
    );


    // --------------------------------------------------------------------------
    // Kills AWT5 Stream Decoder object and frees all memory
    // Returns no errors
    // --------------------------------------------------------------------------

    void awt5_decode_stream_kill(
        PAWT5_DEC_OBJ *dec_obj               // IN: pointer on initialized AWT5 Decoder object
    );





    // ============================================================================
    // ============================================================================
    // ============================================================================
    //
    // AWT5 SaaS/Client-Server tied version
    //
    // ============================================================================
    // ============================================================================
    // ============================================================================


    // NOTE -- ANDROID USERS  !!!  NOTE -- ANDROID USERS  !!! NOTE -- ANDROID USERS
    // In Android, operations with device-tied licenses may require adding Network/Internet access into the app permissions:
    // E.g. in AndroidManifest.xml: <uses-permission android:name="android.permission.INTERNET" />



    // --------------------------------------------------------------------------
    // ONLY FOR SAAS/Client-Server version of AWT5.
    // Generates a "license request" that is to be sent to the AWT Licensing 
    // Server to obtain "license" key for AWT5 Encoder or Decoder.
    // The request is the same for both encoding and decoding functions.
    // The license is different for encoder and decoder.
    // Expects duration of audio to be processed (in seconds). The AWT5 processing 
    // tool will refuse processing audio longer than requested.
    // Returns:
    // - a string with the license request key.
    // - NULL if license request could not be generated 
    // Note: free()-ing the memory is on user
    // --------------------------------------------------------------------------
    char* awt5_license_request(unsigned duration_sec);




    // --------------------------------------------------------------------------
    // ONLY FOR SAAS/Client-Server version of AWT5.
    // 'Method' should be 0 for Encoding license, 1 for Decoding license.
    // Returns information on the license, in particular:
    // -- remaining license validity time relative to the current system time
    // -- licensed audio duration
    // --------------------------------------------------------------------------

    unsigned awt5_license_info(char* license_str, unsigned method, unsigned* valid_for_sec, unsigned* licensed_duration_sec);



#endif

#if __cplusplus
}   // Extern C
#endif
